{"version":3,"file":"conveyer.min.js","sources":["../src/browser.ts","../src/utils.ts","../src/Conveyer.ts","../src/index.umd.ts","../src/consts.ts","../src/reactive.ts"],"sourcesContent":["/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport const IS_IE = /msie|trident/g.test(\n  (typeof window !== \"undefined\" && window?.navigator?.userAgent?.toLowerCase()) || \"\",\n);\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nexport function findIndex<T>(arr: T[], callback: (element: T, index: number) => boolean) {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Axes, { OnChange, OnHold, PanInput, WheelInput } from \"@egjs/axes\";\nimport Component from \"@egjs/component\";\nimport { IS_IE } from \"./browser\";\nimport { ReactiveSubscribe, Reactive, Ref } from \"@cfcs/core\";\nimport {\n  ConveyerEvents, ConveyerItem,\n  ConveyerOptions, FindItemOptions, ConveyerReactiveState,\n  ScrollIntoViewOptions,\n} from \"./types\";\nimport { isString } from \"./utils\";\n\n\n/**\n * Conveyer adds Drag gestures to your Native Scroll.\n * @ko Conveyer는 네이티브 스크롤에 드래그 제스처를 추가합니다.\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @example\n```html\n<div class=\"items\">\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n</div>\n<script>\nimport Conveyer from \"@egjs/conveyer\";\n\nconst conveyer = new Conveyer(\".items\");\n</script>\n```\n */\n@ReactiveSubscribe\nclass Conveyer extends Component<ConveyerEvents> {\n  protected _scrollAreaElement: HTMLElement;\n  protected _axes: Axes | null = null;\n  protected _items: ConveyerItem[] = [];\n  protected _size = 0;\n  protected _scrollSize = 0;\n  protected _options: ConveyerOptions;\n\n  private _scrollTimer = 0;\n  private _isDragScroll = false;\n  private _isAnimation = false;\n  private _scrollArea: string | HTMLElement | Ref<HTMLElement>;\n\n  /**\n   * Whether the scroll has reached the start.\n   * @ko 스크롤이 시작에 닿았는지 여부.\n   * @name Conveyer#isReachStart\n   * @type {boolean}\n   * @default true\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachStart\n   * ```\n   */\n  @Reactive(\"isReachStart\") private _isReachStart = true;\n  /**\n   * Whether the scroll has reached the end.\n   * @ko 스크롤이 끝에 닿았는지 여부.\n   * @name Conveyer#isReachEnd\n   * @type {boolean}\n   * @default false\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.isReachEnd\n   * ```\n   */\n  @Reactive(\"isReachEnd\") private _isReachEnd = false;\n  /**\n   * the scroll position of the container\n   * @ko 컨테이너의 스크롤 위치\n   * @name Conveyer#scrollPos\n   * @type {number}\n   * @default 0\n   * @readonly\n   * @example\n   * ```js\n   * import { Conveyer } from \"@egjs/conveyer\";\n   *\n   * const conveyer = new Conveyer(\".container\");\n   *\n   * conveyer.scrollPos\n   * ```\n   */\n  @Reactive(\"scrollPos\") protected _pos = 0;\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the InfiniteGrid module <ko>eg.InfiniteGrid 모듈의 옵션 객체</ko>\n   */\n  constructor(scrollArea: string | HTMLElement | Ref<HTMLElement>, options: ConveyerOptions = {}) {\n    super();\n    this._options = {\n      horizontal: true,\n      useDrag: true,\n      useSideWheel: false,\n      autoInit: true,\n      scrollDebounce: 100,\n      ...options,\n    };\n\n    this._scrollArea = scrollArea;\n    if (this._options.autoInit) {\n      this.init();\n    }\n  }\n  /**\n   * Finds an element for that direction.\n   * @ko 해당 방향에 대해 엘리먼트를 찾는다.]\n   * @see {@link /docs/examples/Methods direction's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findElement` method. <ko>findElement 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findElement(direction: \"start\" | \"end\" | \"prev\" | \"next\", options: FindItemOptions = {}) {\n    return this.findItem(direction, options)?.element || null;\n  }\n  /**\n   * Finds an item for an element or its direction.\n   * @ko 엘리먼트 또는 해당 방향에 대해 아이템을 찾는다.\n   * @see {@link /docs/examples/Methods direction's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `findItem` method. <ko>`findItem` 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public findItem(\n    target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\",\n    options: FindItemOptions = {},\n  ): ConveyerItem | null {\n    const pos = this._pos;\n    const scrollSize = this._scrollSize;\n    const size = this._size;\n    const hitTest = options?.hitTest ?? 1;\n    const items = [...this._items];\n    const length = items.length;\n    const endPos = pos + size;\n    const sibling = options.sibling;\n    const startVirtualItem = { pos: 0, size: 0 };\n    const endVirtualItem = { pos: scrollSize, size: 0 };\n\n    if (items[0].pos > 0) {\n      items.unshift(startVirtualItem);\n    }\n    if (length && items[length - 1].pos + items[length - 1].size < scrollSize) {\n      items.push(endVirtualItem);\n    }\n    let selectedItem: ConveyerItem | undefined;\n\n\n    if (target === \"start\") {\n      if (pos < 0) {\n        return null;\n      }\n      const selectedItems = [...items].reverse().filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos - pos;\n        const dist2 = dist + itemSize;\n\n        return (dist >= 0) || (dist2 >= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse();\n\n      selectedItem = (selectedItems[0] === startVirtualItem && selectedItems[1]) || selectedItems[0];\n    } else if (target === \"end\") {\n      if (pos > scrollSize - size) {\n        return null;\n      }\n      const selectedItems = items.filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos + itemSize - endPos;\n        const dist2 = dist - itemSize;\n\n        return dist <= 0 || (dist2 <= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse();\n\n      selectedItem = (selectedItems[0] === endVirtualItem && selectedItems[1]) || selectedItems[0];\n    } else if (target === \"prev\") {\n      selectedItem = items.filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos + itemSize - pos;\n        const dist2 = dist - itemSize;\n\n        return dist <= 0 || (dist2 <= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n    } else if (target === \"next\") {\n      selectedItem = items.reverse().filter(item => {\n        const itemSize = item.size;\n        const dist = item.pos - endPos;\n        const dist2 = dist + itemSize;\n\n        return dist >= 0 || (dist2 >= 0 && (!itemSize || Math.abs(dist2) / itemSize >= hitTest));\n      }).reverse()[0];\n    } else {\n      return this._getItem(target);\n    }\n    if (sibling && selectedItem) {\n      const selectedIndex = items.indexOf(selectedItem);\n\n      if (selectedIndex > -1) {\n        selectedItem = items[selectedIndex + sibling];\n      }\n    }\n    return selectedItem || null;\n  }\n  /**\n   * Scrolls an element or an item in that direction into the view.\n   * @ko 엘리먼트나 해당 방향에 있는 아이템을 뷰안으로 스크롤을 한다.\n   * @see {@link /docs/examples/Methods target's example} page for detailed information\n   * @param - direction of the element. \"start\" and \"end\" find inside. \"prev\" and \"next\" find outside. <ko>엘리먼트의 방향. \"start\", \"end\"는 안쪽으로 찾는다. \"prev\", \"next\"는 바깥쪽으로 찾는다.</ko>\n   * @param - Options for the `scrollIntoView` method. <ko>`scrollIntoView` 메서드의 옵션</ko>\n   * @example\n   * <p align=\"center\">\n   *  <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView1.png\" height=\"200\" />\n   * </p>\n   * <p align=\"center\">\n   *   <img src=\"https://naver.github.io/egjs-conveyer/img/scrollIntoView2.png\" height=\"210\" />\n   * </p>\n   */\n  public scrollIntoView(target: HTMLElement | \"start\" | \"end\" | \"prev\" | \"next\", options: ScrollIntoViewOptions = {}) {\n    let item = this.findItem(target, options);\n\n    if (!item) {\n      return;\n    }\n    const duration = options.duration || 0;\n    let nextScrollPos = this._getNextScrollPos(item, options);\n\n    if (isString(target) && options.excludeStand && nextScrollPos === this._pos) {\n      const selectedIndex = this._items.indexOf(item);\n\n      if (selectedIndex === -1) {\n        return;\n      }\n      const sibling = target === \"start\" || target === \"prev\" ? -1 : 1;\n      item = this._items[selectedIndex + sibling];\n\n      if (!item) {\n        return;\n      }\n      nextScrollPos = this._getNextScrollPos(item, options);\n    }\n\n    this.scrollBy(nextScrollPos - this._pos, duration);\n  }\n  /**\n   * Scrolls by the given position amount.\n   * @ko 주어진 위치 양만큼 스크롤한다.\n   * @param - Amount of position to scroll by. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll by that position. <ko>해당 위치만큼 스크롤하는 시간</ko>\n   */\n  public scrollBy(pos: number, duration = 0) {\n    this._axes!.setBy({ scroll: -pos }, duration);\n  }\n  /**\n   * Scroll to the given position.\n   * @ko 주어진 위치로 스크롤한다.\n   * @param - Amount of position to scroll to. <ko>스크롤할 위치의 양.</ko>\n   * @param - Duration to scroll to that position. <ko>해당 위치로 스크롤하는 시간</ko>\n   */\n  public scrollTo(pos: number, duration = 0) {\n    this._axes!.setBy({ scroll: this._pos - pos }, duration);\n  }\n  /**\n   * Set the items directly to the Conveyer.\n   * @ko Conveyer에 아이템들을 직접 설정한다.\n   * @param - Items to set on Conveyer <ko>Conveyer에 설정할 아이템들</ko>\n   */\n  public setItems(items: ConveyerItem[]) {\n    this._items = items;\n  }\n  /**\n   * Update the position and size information of items.\n   * @ko 아이템들의 포지션, 사이즈 정보를 업데이트 한다.\n   */\n  public updateItems() {\n    const scrollAreaElement = this._scrollAreaElement;\n    const itemSelector = this._options.itemSelector;\n    const itemElements = [].slice.call(\n      itemSelector ? scrollAreaElement.querySelectorAll(itemSelector) : scrollAreaElement.children,\n    );\n    this.setItems(itemElements.map((el) => this._getItem(el)));\n  }\n  /**\n   * Update container size and scroll size.\n   * @ko 컨테이너의 크기, 스크롤 사이즈를 업데이트 한다.\n   */\n  public updateContainer() {\n    const scrollAreaElement = this._scrollAreaElement;\n    const horizontal = this._options.horizontal;\n\n    const size = horizontal ? scrollAreaElement.clientWidth : scrollAreaElement.clientHeight;\n    let scrollSize = horizontal ? scrollAreaElement.scrollWidth : scrollAreaElement.scrollHeight;\n\n    // check decimal point\n    if (IS_IE && scrollSize === size + 1) {\n      const style = getComputedStyle(scrollAreaElement);\n      const boxSizing = style.boxSizing;\n      const borderSize = horizontal\n        ? (parseFloat(style.borderLeftWidth) || 0) + (parseFloat(style.borderRightWidth) || 0)\n        : (parseFloat(style.borderTopWidth) || 0) + (parseFloat(style.borderBottomWidth) || 0);\n      const cssSize = parseFloat(horizontal ? style.width : style.height) || 0;\n      const contentSize = cssSize - (boxSizing === \"border-box\" ? borderSize : 0);\n\n      // 0 < 0.5 && 0.5 < 1\n      if (size < contentSize && contentSize < size + 1) {\n        scrollSize = size;\n      }\n    }\n    this._size = size;\n    this._scrollSize = scrollSize;\n    this._refreshScroll();\n    this._onScroll();\n  }\n  /**\n   * Updating containers and items.\n   * @ko 컨테이너와 아이템들을 업데이트 한다.\n   * @method\n   */\n  public update = () => {\n    this.updateItems();\n    this.updateContainer();\n  }\n  /**\n   * If you use the autoInit option as false, you can initialize it directly through the init method.\n   * @ko autoInit 옵션을 false로 사용하는 경우 직접 init 메서드를 통해 초기화 할 수 있다.\n   */\n  public init() {\n    if (this._axes) {\n      return;\n    }\n\n    const scrollArea = this._scrollArea;\n    let el!: HTMLElement;\n\n    if (isString(scrollArea)) {\n      el = document.querySelector<HTMLElement>(scrollArea)!;\n    } else if (scrollArea instanceof Element) {\n      el = scrollArea;\n    } else if (\"value\" in scrollArea || \"current\" in scrollArea) {\n      el = scrollArea.value! || scrollArea.current!;\n    }\n\n    this._scrollAreaElement = el;\n    let isDrag = false;\n    const scrollAreaElement = this._scrollAreaElement;\n    const options = this._options;\n    const axes = new Axes({\n      scroll: {\n        range: [-Infinity, Infinity],\n      },\n    }, {\n      deceleration: 0.005,\n      round: 1,\n      nested: options.nested,\n    }, {\n      scroll: 0,\n    });\n    let isHold = false;\n\n    axes.on({\n      \"hold\": e => {\n        isHold = true;\n        isDrag = false;\n        const nativeEvent = this._getNativeEvent(e);\n\n        if (!nativeEvent) {\n          return;\n        }\n        if (options.preventDefault) {\n          nativeEvent.preventDefault();\n        }\n        if (options.preventClickOnDrag) {\n          this._disableClick();\n        }\n      },\n      \"change\": e => {\n        const nativeEvent = this._getNativeEvent(e);\n        if (nativeEvent && !isHold) {\n          return;\n        }\n        if (options.useSideWheel && this._isMixedWheel(nativeEvent)) {\n          return;\n        }\n        this._isDragScroll = !!nativeEvent && nativeEvent.type !== \"wheel\";\n        this._isAnimation = !!isHold;\n        isDrag = true;\n        const scroll = e.delta.scroll;\n\n        if (options.horizontal) {\n          scrollAreaElement.scrollLeft -= scroll;\n        } else {\n          scrollAreaElement.scrollTop -= scroll;\n        }\n        if (options.nested) {\n          this._checkNestedMove(nativeEvent);\n        }\n      },\n      \"release\": e => {\n        if (!isDrag) {\n          e.setTo({ ...e.depaPos }, 0);\n          this._enableClick();\n        }\n        isDrag = false;\n      },\n    });\n\n    this._axes = axes;\n    if (options.useDrag) {\n      axes.connect(options.horizontal ? [\"scroll\", \"\"] : [\"\", \"scroll\"], new PanInput(scrollAreaElement, {\n        inputType: [\"mouse\"],\n        touchAction: \"auto\",\n      }));\n    }\n    if (options.useSideWheel) {\n      axes.connect(options.horizontal ? [\"scroll\", \"\"] : [\"\", \"scroll\"], new WheelInput(scrollAreaElement, {\n        useNormalized: false,\n      }));\n    }\n    scrollAreaElement.addEventListener(\"scroll\", this._onScroll);\n    window.addEventListener(\"resize\", this.update);\n\n    this.update();\n  }\n  /**\n   * Releases the instnace and events.\n   * @ko 인스턴스와 이벤트를 해제한다.\n   */\n  public destroy() {\n    this._axes?.destroy();\n    this.unsubscribe();\n    this._scrollAreaElement?.removeEventListener(\"scroll\", this._onScroll);\n\n    if (typeof window !== \"undefined\") {\n      window.removeEventListener(\"resize\", this.update);\n    }\n    this.off();\n    this._axes = null;\n  }\n  private _refreshScroll() {\n    const horizontal = this._options.horizontal;\n    const scrollAreaElement = this._scrollAreaElement;\n\n    this._pos = Math.min(\n      this._scrollSize - this._size,\n      horizontal ? scrollAreaElement.scrollLeft : scrollAreaElement.scrollTop,\n    );\n  }\n  private _getItem(element: HTMLElement): ConveyerItem {\n    const horizontal = this._options.horizontal;\n\n    return {\n      element,\n      pos: horizontal ? element.offsetLeft : element.offsetTop,\n      size: horizontal ? element.offsetWidth : element.offsetHeight,\n    };\n  }\n  private _getNativeEvent(e: OnHold | OnChange) {\n    return e?.inputEvent?.srcEvent ? e.inputEvent?.srcEvent : e?.inputEvent;\n  }\n  private _getNextScrollPos(item: ConveyerItem, options: ScrollIntoViewOptions) {\n    const size = this._size;\n    const align = options.align || \"start\";\n    const padding = options.offset || 0;\n    const itemPos = item!.pos;\n    const itemSize = item!.size;\n    let scrollPos = 0;\n\n    if (align === \"start\") {\n      scrollPos = itemPos - padding;\n    } else if (align === \"end\") {\n      scrollPos = itemPos + itemSize - size + padding;\n    } else if (align === \"center\") {\n      scrollPos = itemPos + itemSize / 2 - size / 2 + padding;\n    }\n    return scrollPos;\n  }\n  private _isMixedWheel(nativeEvent: any) {\n    return !!nativeEvent && nativeEvent?.type === \"wheel\" && nativeEvent?.deltaX && nativeEvent?.deltaY;\n  }\n  private _checkNestedMove(nativeEvent: any) {\n    if (this.isReachStart || this.isReachEnd) {\n      nativeEvent.__childrenAxesAlreadyChanged = false;\n    }\n  }\n  private _onScroll = (e?: any) => {\n    if (e) {\n      this._debounceScroll();\n    }\n    this._refreshScroll();\n\n    const size = this._size;\n    const scrollSize = this._scrollSize;\n    const pos = this._pos;\n\n    // enter start\n    if (pos <= 0 && this.isReachStart !== true) {\n      this._isReachStart = true;\n      /**\n       * This event is fired when scroll reach start.\n       * @ko 스크롤이 앞에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachStart\n       */\n      this.trigger(\"reachStart\");\n    } else if (pos > 0 && this.isReachStart !== false) {\n      this._isReachStart = false;\n      /**\n       * This event is fired when scroll leave start.\n       * @ko 스크롤이 앞에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveStart\n       */\n      this.trigger(\"leaveStart\");\n    }\n    // enter end\n    if (scrollSize - size - pos < 1 && this.isReachEnd !== true) {\n      this._isReachEnd = true;\n      /**\n       * This event is fired when scroll reach end.\n       * @ko 스크롤이 끝에 닿으면 발생하는 이벤트이다.\n       * @event Conveyer#reachEnd\n       */\n      this.trigger(\"reachEnd\");\n    } else if (!(scrollSize - size - pos < 1) && this.isReachEnd !== false) {\n      this._isReachEnd = false;\n      /**\n       * This event is fired when scroll leave end.\n       * @ko 스크롤이 끝에서 떠나면 발생하는 이벤트이다.\n       * @event Conveyer#leaveEnd\n       */\n      this.trigger(\"leaveEnd\");\n    }\n  }\n  private _onPreventClick = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this._enableClick();\n  }\n  private _enableClick() {\n    window.removeEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _disableClick() {\n    window.addEventListener(\"click\", this._onPreventClick, true);\n  }\n  private _debounceScroll() {\n    if (!this._scrollTimer) {\n      /**\n       * This event is fired when begin scroll.\n       * @ko 스크롤이 시작하면 발생하는 이벤트이다.\n       * @event Conveyer#beginScroll\n       */\n      this.trigger(\"beginScroll\");\n    }\n    window.clearTimeout(this._scrollTimer);\n    this._scrollTimer = window.setTimeout(() => {\n      this._scrollTimer = 0;\n      /**\n       * This event is fired when finish scroll.\n       * @ko 스크롤이 끝나면 발생하는 이벤트이다.\n       * @event Conveyer#finishScroll\n       * @param {OnFinishScroll} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       */\n      this.trigger(\"finishScroll\", {\n        isDragScroll: this._isDragScroll,\n        isTrusted: this._isDragScroll || !this._isAnimation,\n      });\n\n      this._isDragScroll = false;\n      this._isAnimation = false;\n    }, this._options.scrollDebounce);\n  }\n}\n\n\ninterface Conveyer extends ConveyerReactiveState, ReactiveSubscribe<ConveyerReactiveState> { }\n\nexport default Conveyer;\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Conveyer, * as modules from \"./index\";\n\nfor (const name in modules) {\n  (Conveyer as any)[name] = (modules as any)[name];\n}\n\nexport default Conveyer;\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport const CONVEYER_METHODS = [\n  \"update\",\n  \"findElement\",\n  \"findItem\",\n  \"scrollBy\",\n  \"scrollTo\",\n  \"scrollIntoView\",\n  \"setItems\",\n  \"updateContainer\",\n  \"updateItems\",\n  \"init\",\n] as const;\n\nexport const CONVEYER_EVENTS = [\n  \"reachStart\",\n  \"reachEnd\",\n  \"leaveStart\",\n  \"leaveEnd\",\n  \"beginScroll\",\n  \"finishScroll\",\n] as const;\n\n","/**\n * egjs-conveyer\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nimport Conveyer from \"./Conveyer\";\nimport { CONVEYER_EVENTS, CONVEYER_METHODS } from \"./consts\";\nimport { ReactiveAdapter, Ref } from \"@cfcs/core\";\nimport { ConveyerEvents, ConveyerMethods, ConveyerOptions, ConveyerReactiveState } from \"./types\";\n\n\nexport interface ConveyerData {\n  container: Ref<HTMLElement>;\n  props: ConveyerOptions;\n}\n\nexport const REACTIVE_CONVEYER: ReactiveAdapter<\n  Conveyer,\n  ConveyerReactiveState,\n  keyof ConveyerMethods,\n  ConveyerData,\n  ConveyerEvents\n> = {\n  methods: CONVEYER_METHODS,\n  events: CONVEYER_EVENTS,\n  created(data) {\n    return new Conveyer(data.container, { ...data.props, autoInit: false });\n  },\n  init(instance, data) {\n    if (data.props.autoInit !== false) {\n      instance!.init();\n    }\n  },\n  on(instance, name, callback) {\n    instance.on(name, callback);\n  },\n  off(instance, name, callback) {\n    instance.off(name, callback);\n  },\n  destroy(instance) {\n    instance.destroy();\n  },\n};\n"],"names":["IS_IE","test","window","navigator","userAgent","toLowerCase","isString","val","name","__extends","scrollArea","options","_super","_this","updateItems","updateContainer","e","_debounceScroll","_refreshScroll","size","_size","scrollSize","_scrollSize","pos","_pos","isReachStart","_isReachStart","trigger","isReachEnd","_isReachEnd","stopPropagation","preventDefault","_enableClick","_options","horizontal","useDrag","useSideWheel","autoInit","scrollDebounce","_scrollArea","init","__proto","direction","this","findItem","element","target","hitTest","items","_items","length","endPos","sibling","startVirtualItem","endVirtualItem","unshift","push","selectedItems","selectedItem","__spreadArray","reverse","filter","item","itemSize","dist","dist2","Math","abs","_getItem","selectedIndex","indexOf","duration","nextScrollPos","_getNextScrollPos","excludeStand","scrollBy","_axes","setBy","scroll","scrollAreaElement","_scrollAreaElement","itemSelector","itemElements","slice","call","querySelectorAll","children","setItems","map","el","boxSizing","borderSize","clientWidth","clientHeight","scrollWidth","scrollHeight","style","getComputedStyle","parseFloat","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","contentSize","width","height","_onScroll","isDrag","axes","isHold","document","querySelector","Element","value","current","Axes","range","Infinity","deceleration","round","nested","on","hold","nativeEvent","_getNativeEvent","preventClickOnDrag","_disableClick","change","_isMixedWheel","_isDragScroll","type","_isAnimation","delta","scrollLeft","scrollTop","_checkNestedMove","release","setTo","depaPos","connect","PanInput","inputType","touchAction","WheelInput","useNormalized","addEventListener","update","destroy","unsubscribe","removeEventListener","off","min","offsetLeft","offsetTop","offsetWidth","offsetHeight","inputEvent","srcEvent","align","padding","offset","itemPos","scrollPos","deltaX","deltaY","__childrenAxesAlreadyChanged","_onPreventClick","_scrollTimer","clearTimeout","setTimeout","isDragScroll","isTrusted","__decorate","Reactive","ReactiveSubscribe","Conveyer","Component","CONVEYER_METHODS","CONVEYER_EVENTS","methods","events","created","data","container","props","instance","callback","modules"],"mappings":"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"}